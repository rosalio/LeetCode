/*
 * @lc app=leetcode id=4 lang=java
 *
 * [4] Median of Two Sorted Arrays
 *
 * https://leetcode.com/problems/median-of-two-sorted-arrays/description/
 *
 * algorithms
 * Hard (25.61%)
 * Total Accepted:    390K
 * Total Submissions: 1.5M
 * Testcase Example:  '[1,3]\n[2]'
 *
 * There are two sorted arrays nums1 and nums2 of size m and n respectively.
 * 
 * Find the median of the two sorted arrays. The overall run time complexity
 * should be O(log (m+n)).
 * 
 * You may assume nums1 and nums2Â cannot be both empty.
 * 
 * Example 1:
 * 
 * 
 * nums1 = [1, 3]
 * nums2 = [2]
 * 
 * The median is 2.0
 * 
 * 
 * Example 2:
 * 
 * 
 * nums1 = [1, 2]
 * nums2 = [3, 4]
 * 
 * The median is (2 + 3)/2 = 2.5
 * 
 * 
 */
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] mergedArray = mergeArrays(nums1, nums2);
        int arrayLength = mergedArray.length;
        if (arrayLength % 2 == 0) {
            int low = mergedArray[arrayLength / 2 - 1];
            int high = mergedArray[arrayLength / 2];
            return ((double)(low + high)) / 2;
        }
        return (double)(mergedArray[(arrayLength - 1) / 2]);
    }

    private int[] mergeArrays(int[] nums1, int[] nums2) {
        int[] result = new int[nums1.length + nums2.length];
        int idx1 = 0;
        int idx2 = 0;
        int idx = 0;

        while (idx1 < nums1.length && idx2 < nums2.length) {
            if (nums1[idx1] < nums2[idx2]) {
                result[idx++] = nums1[idx1++];
            } else {
                result[idx++] = nums2[idx2++];
            }
        }

        while (idx1 < nums1.length) {
            result[idx++] = nums1[idx1++];
        }
        while (idx2 < nums2.length) {
            result[idx++] = nums2[idx2++];
        }

        return result;
    }
}

